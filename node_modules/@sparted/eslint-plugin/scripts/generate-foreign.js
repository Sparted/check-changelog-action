'use strict';

const path = require('path');
const process = require('process');

const fs = require('fs-extra');
const pkgDir = require('pkg-dir');
const { ESLint } = require('eslint');

const { dependencies } = require('../package.json');


(async function main() {
  const eslint = new ESLint({ fix: true });

  for await (const [packageName] of Object.entries(dependencies)) {
    if (isEslintPlugin(packageName)) {
      await generateExportingPlugin(packageName, 'environment', eslint);
      await generateExportingPlugin(packageName, 'processor', eslint);
      await generateExportingPlugin(packageName, 'rule', eslint);
    }
  }
})().catch((error) => {
  process.exitCode = 1;
  console.error(error);
});


function isEslintPlugin(packageName) {
  return packageName.includes('eslint-plugin');
}

async function generateExportingPlugin(packageName, type, eslint) {
  const eslintPluginName = getEslintPluginName(packageName);
  const targetFile = path.resolve(__dirname, `../lib/foreign-${type}s`, `${eslintPluginName}.js`);

  await fs.outputFile(
    targetFile,
    `\
/**
 * DON'T EDIT THIS FILE WHICH WAS GENERATED BY '${path.relative(pkgDir.sync(__dirname), __filename)}'.
 */

'use strict';

const { ${type}s } = require('${packageName}');


module.exports = Object.entries(${type}s || {}).reduce((obj, [${type}Id, ${type}Definition]) => {
  return {
    ...obj,
    [\`${eslintPluginName}/\${${type}Id}\`]: ${type}Definition,
  };
}, {});
`
  );

  try {
    const result = await eslint.lintFiles([targetFile]);

    await ESLint.outputFixes(result);
  } catch (error) {
    console.log(error.message);
    console.log('Failed to fix lint error, try to run it again');
  }
}

function getEslintPluginName(packageName) {
  const [firstLetter] = packageName;

  return firstLetter === '@'
    ? packageName.slice(firstLetter.length, packageName.indexOf('/'))
    : packageName.slice('eslint-plugin-'.length);
}
