// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../jsonc-eslint-parser
//   ../json-schema
//   ../eslint

declare module 'eslint-plugin-jsonc' {
    import type { RuleModule } from "eslint-plugin-jsonc/types";
    import processors from "eslint-plugin-jsonc/processors";
    import { parseForESLint, traverseNodes, AST, getStaticJSONValue } from "jsonc-eslint-parser";
    const configs: {
        base: {
            plugins: string[];
            overrides: {
                files: string[];
                parser: string;
                rules: {
                    strict: string;
                    "no-unused-expressions": string;
                };
            }[];
        };
        "auto-config": {
            extends: string[];
            overrides: {
                files: string[];
                processor: string;
            }[];
        };
        "recommended-with-json": {
            extends: string[];
            rules: {
                "jsonc/comma-dangle": string;
                "jsonc/no-bigint-literals": string;
                "jsonc/no-comments": string;
                "jsonc/no-dupe-keys": string;
                "jsonc/no-multi-str": string;
                "jsonc/no-number-props": string;
                "jsonc/no-numeric-separators": string;
                "jsonc/no-regexp-literals": string;
                "jsonc/no-sparse-arrays": string;
                "jsonc/no-template-literals": string;
                "jsonc/no-undefined-value": string;
                "jsonc/no-useless-escape": string;
                "jsonc/quote-props": string;
                "jsonc/quotes": string;
                "jsonc/space-unary-ops": string;
                "jsonc/valid-json-number": string;
            };
        };
        "recommended-with-jsonc": {
            extends: string[];
            rules: {
                "jsonc/no-bigint-literals": string;
                "jsonc/no-dupe-keys": string;
                "jsonc/no-multi-str": string;
                "jsonc/no-number-props": string;
                "jsonc/no-numeric-separators": string;
                "jsonc/no-regexp-literals": string;
                "jsonc/no-sparse-arrays": string;
                "jsonc/no-template-literals": string;
                "jsonc/no-undefined-value": string;
                "jsonc/no-useless-escape": string;
                "jsonc/quote-props": string;
                "jsonc/quotes": string;
                "jsonc/space-unary-ops": string;
                "jsonc/valid-json-number": string;
            };
        };
        "recommended-with-json5": {
            extends: string[];
            rules: {
                "jsonc/no-bigint-literals": string;
                "jsonc/no-dupe-keys": string;
                "jsonc/no-number-props": string;
                "jsonc/no-numeric-separators": string;
                "jsonc/no-regexp-literals": string;
                "jsonc/no-sparse-arrays": string;
                "jsonc/no-template-literals": string;
                "jsonc/no-undefined-value": string;
                "jsonc/no-useless-escape": string;
                "jsonc/space-unary-ops": string;
            };
        };
    };
    const rules: {
        [key: string]: RuleModule;
    };
    const _default: {
        configs: {
            base: {
                plugins: string[];
                overrides: {
                    files: string[];
                    parser: string;
                    rules: {
                        strict: string;
                        "no-unused-expressions": string;
                    };
                }[];
            };
            "auto-config": {
                extends: string[];
                overrides: {
                    files: string[];
                    processor: string;
                }[];
            };
            "recommended-with-json": {
                extends: string[];
                rules: {
                    "jsonc/comma-dangle": string;
                    "jsonc/no-bigint-literals": string;
                    "jsonc/no-comments": string;
                    "jsonc/no-dupe-keys": string;
                    "jsonc/no-multi-str": string;
                    "jsonc/no-number-props": string;
                    "jsonc/no-numeric-separators": string;
                    "jsonc/no-regexp-literals": string;
                    "jsonc/no-sparse-arrays": string;
                    "jsonc/no-template-literals": string;
                    "jsonc/no-undefined-value": string;
                    "jsonc/no-useless-escape": string;
                    "jsonc/quote-props": string;
                    "jsonc/quotes": string;
                    "jsonc/space-unary-ops": string;
                    "jsonc/valid-json-number": string;
                };
            };
            "recommended-with-jsonc": {
                extends: string[];
                rules: {
                    "jsonc/no-bigint-literals": string;
                    "jsonc/no-dupe-keys": string;
                    "jsonc/no-multi-str": string;
                    "jsonc/no-number-props": string;
                    "jsonc/no-numeric-separators": string;
                    "jsonc/no-regexp-literals": string;
                    "jsonc/no-sparse-arrays": string;
                    "jsonc/no-template-literals": string;
                    "jsonc/no-undefined-value": string;
                    "jsonc/no-useless-escape": string;
                    "jsonc/quote-props": string;
                    "jsonc/quotes": string;
                    "jsonc/space-unary-ops": string;
                    "jsonc/valid-json-number": string;
                };
            };
            "recommended-with-json5": {
                extends: string[];
                rules: {
                    "jsonc/no-bigint-literals": string;
                    "jsonc/no-dupe-keys": string;
                    "jsonc/no-number-props": string;
                    "jsonc/no-numeric-separators": string;
                    "jsonc/no-regexp-literals": string;
                    "jsonc/no-sparse-arrays": string;
                    "jsonc/no-template-literals": string;
                    "jsonc/no-undefined-value": string;
                    "jsonc/no-useless-escape": string;
                    "jsonc/space-unary-ops": string;
                };
            };
        };
        rules: {
            [key: string]: RuleModule;
        };
        processors: {
            "auto-config": {
                preprocess(code: string, filename: string): string[];
                postprocess(messages: import("eslint").Linter.LintMessage[][], filename: string): import("eslint").Linter.LintMessage[];
                supportsAutofix: boolean;
            };
        };
        parseForESLint: typeof parseForESLint;
        parseJSON: typeof parseJSON;
        traverseNodes: typeof traverseNodes;
        getStaticJSONValue: typeof getStaticJSONValue;
    };
    export default _default;
    export { configs, rules, processors, parseForESLint, parseJSON, traverseNodes, getStaticJSONValue, AST, };
    function parseJSON(code: string, options?: any): AST.JSONProgram;
}

declare module 'eslint-plugin-jsonc/types' {
    import type { JSONSchema4 } from "json-schema";
    import type { Rule } from "eslint";
    export interface RuleListener {
        [key: string]: (node: never) => void;
    }
    export interface RuleModule {
        meta: RuleMetaData;
        create(context: Rule.RuleContext): RuleListener;
    }
    export interface RuleMetaData {
        docs: {
            description: string;
            recommended: ("json" | "jsonc" | "json5")[] | null;
            url: string;
            ruleId: string;
            ruleName: string;
            replacedBy?: [];
            default?: "error" | "warn";
            extensionRule: boolean;
        };
        messages: {
            [messageId: string]: string;
        };
        fixable?: "code" | "whitespace";
        schema: JSONSchema4 | JSONSchema4[];
        deprecated?: boolean;
        type: "problem" | "suggestion" | "layout";
    }
    export interface PartialRuleModule {
        meta: PartialRuleMetaData;
        create(context: Rule.RuleContext): RuleListener;
    }
    export interface PartialRuleMetaData {
        docs: {
            description: string;
            recommended: ("json" | "jsonc" | "json5")[] | null;
            replacedBy?: [];
            default?: "error" | "warn";
            extensionRule: boolean;
        };
        messages: {
            [messageId: string]: string;
        };
        fixable?: "code" | "whitespace";
        schema: JSONSchema4 | JSONSchema4[];
        deprecated?: boolean;
        type: "problem" | "suggestion" | "layout";
    }
}

declare module 'eslint-plugin-jsonc/processors' {
    const _default: {
        "auto-config": {
            preprocess(code: string, filename: string): string[];
            postprocess(messages: import("eslint").Linter.LintMessage[][], filename: string): import("eslint").Linter.LintMessage[];
            supportsAutofix: boolean;
        };
    };
    export = _default;
}

